tosca_definitions_version: cloudify_dsl_1_4

imports:
  - https://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-vault-plugin

inputs:

  main_file_name:
    type: string
    default: blueprint.yaml
  
  blueprint_archive:
    type: string
    default: https://github.com/mateuszmizer/exl_public/raw/main/blueprint2.zip
   
  secret_key:
    type: string
    default: hello

dsl_definitions:

  vault_config: &vault_config
    url: { get_secret: vault_server }
    token: { get_secret: vault_token }
   
node_templates:
  
  install_vault_secrets:
    type:  cloudify.nodes.vault.secret
    properties:
      client_config: *vault_config
      use_external_resource: True
      resource_config:
        create_secret: True
        secret_key: {get_input: secret_key}
        secret_name: { concat: [{get_input: secret_key}, '_', { get_sys: [deployment, id] }] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/start_execution.py
          executor: central_deployment_agent
          inputs:
            inputs_list: [workflow_id, deployment_id, queue, parameters]
            workflow_id: execute_operation
            deployment_id: { get_sys: [deployment, id] }
            queue: true
            parameters:
              operation: cloudify.interfaces.vault.delete
              node_ids: [install_vault_secrets]
              # node_instance_ids: [ get_attribute: [install_vault_secrets, node_instance_id] ]
        start:
          implementation: vault.cloudify_vault.tasks.create_secret
        update: {}
        delete: {}
      cloudify.interfaces.vault:
        delete:
          implementation: vault.cloudify_vault.tasks.delete_secret

  deployment:
    type: cloudify.nodes.Component 
    properties:
      resource_config:
        blueprint:
          id: { concat: [ { get_input: secret_key}, '_', { get_sys: [deployment, id] }]}
          main_file_name: { get_input: main_file_name }
          external_resource: false
          blueprint_archive: { get_input: blueprint_archive }
        deployment:
          id: {concat: [ { get_input: secret_key}, '_', { get_sys: [deployment, id] }]}
          inputs:
            hello_secret_name:  { concat: [ { get_input: secret_key}, '_', { get_sys: [deployment, id] }] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: install_vault_secrets

  uninstall_vault_secrets:
    type:  cloudify.nodes.vault.secret
    properties:
      client_config: *vault_config
      use_external_resource: True
      resource_config:
        create_secret: True
        secret_key: { get_input: secret_key}
        secret_name: { concat: [{get_input: secret_key}, '_', { get_sys: [deployment, id] }] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create: {}  
        update: {}
        stop:
          implementation: scripts/start_execution.py
          executor: central_deployment_agent
          inputs:
            inputs_list: [workflow_id, deployment_id, queue, parameters]
            workflow_id: execute_operation
            deployment_id: { get_sys: [deployment, id] }
            queue: true
            parameters:
              operation: cloudify.interfaces.vault.delete
              node_ids: [install_vault_secrets]
              # node_instance_ids: [ get_attribute: [install_vault_secrets, node_instance_id] ]
        delete:
          implementation: vault.cloudify_vault.tasks.create_secret
    relationships:
      - type: cloudify.relationships.depends_on
        target: deployment
